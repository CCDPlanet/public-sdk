<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: houses/houses.proto

namespace Houses;

use UnexpectedValueException;

/**
 * Protobuf type <code>houses.ApartmentClass</code>
 */
class ApartmentClass
{
    /**
     * UNKNOWN использвуется для перехвата неустановленных значений. НЕ
     * ИСПОЛЬЗОВАТЬ.
     *
     * Generated from protobuf enum <code>UNKNOWN = 0;</code>
     */
    const UNKNOWN = 0;
    /**
     * Generated from protobuf enum <code>A = 1;</code>
     */
    const A = 1;
    /**
     * Generated from protobuf enum <code>B = 2;</code>
     */
    const B = 2;
    /**
     * Generated from protobuf enum <code>C = 3;</code>
     */
    const C = 3;
    /**
     * Generated from protobuf enum <code>D = 4;</code>
     */
    const D = 4;
    /**
     * Generated from protobuf enum <code>S = 5;</code>
     */
    const S = 5;

    private static $valueToName = [
        self::UNKNOWN => 'UNKNOWN',
        self::A => 'A',
        self::B => 'B',
        self::C => 'C',
        self::D => 'D',
        self::S => 'S',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

